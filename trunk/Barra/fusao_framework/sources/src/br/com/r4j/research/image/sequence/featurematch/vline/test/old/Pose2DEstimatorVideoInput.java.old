package br.com.r4j.research.image.sequence.featurematch.vline.test;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.IOException;
import java.awt.*;
import java.util.*;
import java.awt.image.*;

import javax.media.*;
import javax.media.format.*;

import br.com.r4j.image.*;
import br.com.r4j.commons.util.*;
import br.com.r4j.image.operation.threebandpacked.*;
import br.com.r4j.image.operation.threebandpacked.morphology.*;
import br.com.r4j.image.operation.threebandpacked.colorspace.*;
import br.com.r4j.math.*;
import br.com.r4j.research.image.sequence.featurematch.vline.*;
import br.com.r4j.video.operation.threebandpacked.*;

import br.com.r4j.research.*;
import br.com.r4j.research.vline.*;

import JSci.maths.*;


/** 
 * Classe centralizadora dos dados, reponsável por gerar as estimativas.
 *
 */
public class Pose2DEstimatorVideoInput extends ThreeBandPackedBaseEffect
{
	private static Log log = LogFactory.getLog(Pose2DEstimatorVideoInput.class.getName());

	private Matcher matcher = null;
	private Pose2DGrabber poseGrabber = null;
	private ImageGrabber imgGrabber = null; 

	private int frameJump = 5;
	private int frameCount = 0;

	private int [] arraCopyOut = null;


	public Pose2DEstimatorVideoInput()
	{
		matcher = new Matcher();
		poseGrabber = new TestPose2DGrabber();
		SfMOdometryStateEstimator sfmEstimator = new SfMOdometryStateEstimator();

		sfmEstimator.setMatcher(matcher);
		sfmEstimator.setPose2DGrabber(poseGrabber);

		imgGrabber = sfmEstimator;

		frameJump = 1;
		frameCount = 0;
	}


	protected int doProcess(Buffer inBuffer, Buffer outBuffer, int [] inData, int [] outData, int width, int height)
	{
		if (arraCopyOut == null || arraCopyOut.length < inData.length)
			arraCopyOut = new int[inData.length];

		long start_t = System.currentTimeMillis();

		if (frameCount%frameJump == 0)
		{
			imgGrabber.imageReceived(inData, outData, width, height, System.currentTimeMillis());
			br.com.r4j.commons.util.Arrays.arrayCopy(outData, arraCopyOut);
			log.debug("timeTaken = " + (System.currentTimeMillis() - start_t));
		}
		else
		{
			br.com.r4j.commons.util.Arrays.arrayCopy(arraCopyOut, outData);
		}
		frameCount++;

        return BUFFER_PROCESSED_OK;       
    }


	// methods for interface PlugIn
    public String getName()
	{
        return "SfM Pose Estimator";
    }

}