package br.com.r4j.robosim;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.Ellipse2D;
import java.util.ArrayList;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import JSci.maths.AbstractDoubleSquareMatrix;
import JSci.maths.AbstractDoubleVector;
import JSci.maths.LinearMath;
import JSci.maths.MaximumIterationsExceededException;
import JSci.maths.statistics.ChiSqrDistribution;
import br.com.r4j.commons.draw.ShapesUtil;
import br.com.r4j.gui.RendererEvent;
import br.com.r4j.gui.RendererListener;
import br.com.r4j.robosim.estimator.Estimator;


public class RobotCovariance implements EstimatorRenderer, RendererListener
{
	private static Log log = LogFactory.getLog(RobotCovariance.class.getName());

	private ArrayList listPoses = null;
	private ArrayList listShapes = null;

	private Pose2D pose = null;
	private Pose2D poseLast = null;
	
	private Shape shapeLast = null;
	private Shape shapeCurrent = null;

	private String strNameMyName = null;

	private EstimatorRendererInfo info = null;
	private Estimator est = null;

	private double c = 0;

	private int currentStep = 0;
	

	public RobotCovariance(Estimator est)
	{
		strNameMyName = "Covar Tracker";
		this.est = est;

		listPoses = new ArrayList();
		listShapes = new ArrayList();

		ChiSqrDistribution dist = new ChiSqrDistribution(3);
		c = dist.inverse(0.8);
		log.debug("dist.inverse(accProb) = " + c + ", dist.inverse(1- accProb) = " + dist.inverse(1 - 0.8));
	}


	public void setEstimatorRendererInfo(EstimatorRendererInfo info)
	{
		this.info = info;
	}


	public void newPose(Pose2D pose)
	{
		currentStep++;
		log.debug("newPose: " + pose);
		this.pose = pose;

		AbstractDoubleSquareMatrix covar = est.getCovariance();
		AbstractDoubleVector [] eigenvectors = new AbstractDoubleVector[3];
		double[] arrayEigenValues;

		arrayEigenValues = LinearMath.eigenSolveSymmetric(covar, eigenvectors);

		double A = Math.sqrt(arrayEigenValues[0])*c;
		double B = Math.sqrt(arrayEigenValues[1])*c;
		double theta1 = Math.atan2(eigenvectors[0].getComponent(1), eigenvectors[0].getComponent(0));

		Ellipse2D.Double ellipse = new Ellipse2D.Double(-A, -B, 2*A, 2*B);
		Shape shpshp = ShapesUtil.rotateShape(ellipse, pose.getTheta() - Math.PI/2);
		shapeCurrent = e.translateAndMaintainShapeSize(pose.getX(), pose.getY(), shpshp);
		listPoses.add(pose);
		listShapes.add(shapeCurrent);
	}


	public void imageUpdatePerformed(RendererEvent e)
	{
	}


	public void updatePerformed(RendererEvent e)
	{
		try
		{
			if (pose != null)
			{
				Graphics2D g2d = e.getGraphics();
				g2d.setXORMode(Color.white);
	
				BasicStroke strokeObjectOutline = new BasicStroke(1f);
				g2d.setStroke(strokeObjectOutline);
				g2d.setColor(Color.black);
				g2d.fill(shapeCurrent);
				g2d.setColor(Color.red);
				g2d.draw(shapeCurrent);
	
				shapeLast = shapeCurrent;
				poseLast = pose; 
			}
		}
		catch (MaximumIterationsExceededException e1)
		{
			log.error("error", e1);
		}
	}


	public void render(RendererEvent e)
	{
		try
		{
			if (pose != null)
			{
				Graphics2D g2d = e.getGraphics();
				g2d.setXORMode(Color.white);
	
				BasicStroke strokeObjectOutline = new BasicStroke(1f);
				g2d.setStroke(strokeObjectOutline);
				g2d.setColor(Color.black);
				g2d.fill(shapeCurrent);
				g2d.setColor(Color.red);
				g2d.draw(shapeCurrent);
	
				shapeLast = ellipse;
				poseLast = pose; 
			}
		}
		catch (MaximumIterationsExceededException e1)
		{
			log.error("error", e1);
		}
	}


	public void erase(RendererEvent e)
	{
		if (shapeLast != null)
		{
			Graphics2D g2d = e.getGraphics();
	
			Shape shpShp = e.translateAndMaintainShapeSize(poseLast.getX(), poseLast.getY(), shapeLast);
			BasicStroke strokeObjectOutline = new BasicStroke(1f);
			g2d.setXORMode(Color.white);
			g2d.setStroke(strokeObjectOutline);
			g2d.setPaint(new Color(info.getColorFill().getRed(), info.getColorFill().getGreen(), info.getColorFill().getBlue(), 150));
			g2d.fill(shpShp);
			g2d.setColor(info.getColorBorder());
			g2d.draw(shpShp);
		}
	}


	public String getName()
	{
		return strNameMyName;
	}


	public void setName(String a)
	{
		strNameMyName = a;
	}


	public void setStep(int currentStep)
	{
		this.currentStep = currentStep;
		pose = (Pose2D) listPoses.get(currentStep);
		shapeCurrent = (Shape) listShapes.get(currentStep);
	}
}
