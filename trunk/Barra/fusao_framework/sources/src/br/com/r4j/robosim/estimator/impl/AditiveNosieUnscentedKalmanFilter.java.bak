package br.com.r4j.robosim.estimator.impl;

import java.util.Iterator;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import JSci.maths.AbstractDoubleMatrix;
import JSci.maths.AbstractDoubleSquareMatrix;
import JSci.maths.AbstractDoubleVector;
import JSci.maths.DoubleMatrix;
import JSci.maths.DoubleSquareMatrix;
import JSci.maths.DoubleVector;
import br.com.r4j.commons.util.MatrixUtil;
import br.com.r4j.configurator.ConfiguratorException;
import br.com.r4j.math.JSciMatrixMath;
import br.com.r4j.robosim.estimator.DynamicModel;
import br.com.r4j.robosim.estimator.EKFDoubleVectorFunction;
import br.com.r4j.robosim.estimator.Estimator;
import br.com.r4j.robosim.estimator.ModelFilter;
import br.com.r4j.robosim.estimator.Sensor;
import br.com.r4j.robosim.estimator.SensorModel;
import br.com.r4j.robosim.estimator.UKFDoubleVectorFunction;


public class AditiveNosieUnscentedKalmanFilter extends BaseEstimator
{
	private static Log log = LogFactory.getLog(AditiveNosieUnscentedKalmanFilter.class.getName());
	private static Log logUKF = LogFactory.getLog("ukf");
	private static Log logUKF_I = LogFactory.getLog("ukf_input");
	private static Log logUKF_covar = LogFactory.getLog("ukf_covar");

	
	private UKFDoubleVectorFunction stateFunction = null;


	public AditiveNosieUnscentedKalmanFilter()
	{
		super();
	}


	public String getName()
	{
		return "Filtro de Kalman Unscented";
	}


	public void addSensorModel(SensorModel sensModel, Sensor sens) throws ConfiguratorException
	{
		if (!(sensModel instanceof UKFDoubleVectorFunction))
			throw new ConfiguratorException("Sensor Model " + sensModel.getName() + " não implementa EKFDoubleVectorFunction");

		super.addSensorModel(sensModel, sens);
	}

	
	public void setDynamicModel(DynamicModel dynModel, Sensor dynModelSensor) throws ConfiguratorException
	{
		if (!(dynModel instanceof UKFDoubleVectorFunction))
			throw new ConfiguratorException("Dynamic Model " + dynModel.getName() + " não implementa EKFDoubleVectorFunction");

		stateFunction = (UKFDoubleVectorFunction) dynModel;

		super.setDynamicModel(dynModel, dynModelSensor);
	}

	
	public void estimate()
	{
		super.estimate();

		logUKF.debug("------------------------------ NOVA ITER");
		logUKF.debug("stateEstimate: \r\n" + MatrixUtil.toString(stateEstimate, 9, 4));
		logUKF.debug("stateCovarEstimate: \r\n" + MatrixUtil.toString(stateCovarEstimate, 9, 4));

		// predição
		double delta = 3 - stateEstimate.dimension();
		double gamma = Math.sqrt(stateEstimate.dimension() + delta);
		double w0state = delta/(delta + stateEstimate.dimension());
		double w0cov = w0state;
		double wi = 1.0/(delta + stateEstimate.dimension())/2;
		logUKF.debug("w0state = " + w0state + ", w0cov = " + w0cov + ", wi = " + wi + ", gamma: " + gamma + ", delta = " + delta);

		// Calcula os sigmas iniciais
		AbstractDoubleMatrix stateLastSigma = this.generateSigmaPoints(stateEstimate, stateCovarEstimate, gamma);

		// Calcula os sigmas pela tranformação de estado
		AbstractDoubleMatrix sigmaStatei_iminus1 = new DoubleMatrix(dynModelSensor.getDataDimension(), dynModelSensor.getDataDimension()*2 + 1);
		AbstractDoubleVector vectDynReadings = new DoubleVector(dynModelSensor.getDataDimension());
		dynModelSensor.getData(vectDynReadings);
		stateFunction.produceResults(stateLastSigma, vectDynReadings, sigmaStatei_iminus1);

		// 2 - Calcula os vetores ...
		//
		AbstractDoubleVector statei_iminus1 = this.calculateMean(sigmaStatei_iminus1, w0state, wi);
		logUKF.debug("statei_iminus1: \r\n" + MatrixUtil.toString(statei_iminus1, 9, 4));

		AbstractDoubleSquareMatrix Pi_iminus1 = this.calculateCov(sigmaStatei_iminus1, statei_iminus1, w0cov, wi);
		AbstractDoubleSquareMatrix Q = dynModel.getModelIncrementalCovariance(dynModelSensor.getDataCovariance());
		Pi_iminus1 = Pi_iminus1.add(Q);
		logUKF.debug("Pi_iminus1: \r\n" + MatrixUtil.toString(Pi_iminus1, 9, 4));
		logUKF.debug("Pi_iminus1.isSymmetric(): " + Pi_iminus1.isSymmetric() + ", Pi_iminus1.det(): " + Pi_iminus1.det());

		this.setState(statei_iminus1, Pi_iminus1);

		Iterator itSensModels = listSensModels.iterator();
		Iterator itSens = listSens.iterator();
		while (itSensModels.hasNext())
		{
			SensorModel snsModel = (SensorModel) itSensModels.next();
			Sensor sns = (Sensor) itSens.next();
			UKFDoubleVectorFunction snsFunc = (UKFDoubleVectorFunction) snsModel;

			// Calcula os sigmas pela tranformação de medição
			DoubleMatrix obsPredSigma = new DoubleMatrix(snsModel.getDataDimension(), snsModel.getDataDimension()*2 + 1);
			boolean bResults = snsFunc.produceResults(sigmaStatei_iminus1, statei_iminus1, obsPredSigma);
			if (bResults)
			{
				AbstractDoubleVector obsPred = this.calculateMean(obsPredSigma, w0state, wi);

				AbstractDoubleSquareMatrix pYY = this.calculateCov(obsPredSigma, obsPred, w0cov, wi);
				pYY = pYY.add(snsModel.getObservationCovariance(sns.getDataCovariance()));

				AbstractDoubleMatrix pXY = this.calculateCov(sigmaStatei_iminus1, statei_iminus1, obsPredSigma, obsPred, w0cov, wi);

				AbstractDoubleSquareMatrix pYYInv = pYY.inverse();
				AbstractDoubleMatrix gain = pXY.multiply(pYYInv);

				AbstractDoubleVector vectReadings = new DoubleVector(sns.getDataDimension());
				sns.getData(vectReadings);
				AbstractDoubleVector vectObservations = snsModel.getObservation(vectReadings);
				AbstractDoubleVector obsDiff = vectReadings.subtract(obsPred);
				AbstractDoubleVector stateGain =  gain.multiply(obsDiff);
				AbstractDoubleVector statei_i = statei_iminus1.add(stateGain);

				AbstractDoubleMatrix gain_x_pYY_x_gainT = gain.multiply(pYY).multiply((AbstractDoubleMatrix) gain.transpose());
				AbstractDoubleSquareMatrix pXXcorrSim = MatrixUtil.convert2SquareMatrix(gain_x_pYY_x_gainT);

				AbstractDoubleSquareMatrix Pi_i = MatrixUtil.convert2SquareMatrix(Pi_iminus1.subtract(pXXcorrSim));

				this.setState(statei_i, Pi_i);
				statei_iminus1 = statei_i; Pi_iminus1 = Pi_i;
			}
		}
		this.fireNewRobotPose();
	}


	public AbstractDoubleMatrix generateSigmaPoints(AbstractDoubleVector mean, AbstractDoubleSquareMatrix covar, double gamma)
	{
		DoubleMatrix sigma = new DoubleMatrix(mean.dimension(), mean.dimension()*2 + 1);

		AbstractDoubleSquareMatrix [] arraySqrts = covar.choleskyDecompose();
		for (int idxVar = 0; idxVar < mean.dimension(); idxVar++)
			sigma.setElement(idxVar, 0, mean.getComponent(idxVar));
		for (int idxVar = 0; idxVar < mean.dimension(); idxVar++)
		{
			for (int idxObj = 0; idxObj < mean.dimension(); idxObj++)
			{
				// Invertido para pegar o valor das linhas da raiz para as colunas dos sigmas.
////				double val = gamma*arraySqrts[0].getElement(idxObj, idxVar);
				double val = gamma*arraySqrts[0].getElement(idxVar, idxObj);
				sigma.setElement(idxVar, idxObj + 1, mean.getComponent(idxVar) + val);
				sigma.setElement(idxVar, idxObj + 1 + mean.dimension(), mean.getComponent(idxVar) - val);
			}
		}

		return sigma;
	}


	public AbstractDoubleVector calculateMean(AbstractDoubleMatrix sigma, double w0state, double wi)
	{
		DoubleVector mean = new DoubleVector(sigma.rows());
		for (int idxState = 0; idxState < sigma.rows(); idxState++)
		{
			double val = w0state*sigma.getElement(idxState, 0);
			for (int i = 1; i < sigma.columns(); i++)
				val += wi*sigma.getElement(idxState, i);
			mean.setComponent(idxState, val);
		}
		return mean;
	}


	public AbstractDoubleSquareMatrix calculateCov(AbstractDoubleMatrix sigma, AbstractDoubleVector mean, double w0cov, double wi)
	{
		AbstractDoubleSquareMatrix cov = new 	DoubleSquareMatrix(mean.dimension());

		AbstractDoubleSquareMatrix matrixTemp = new DoubleSquareMatrix(mean.dimension());
		for (int i = 0; i < mean.dimension(); i++) for (int j = 0; j <= i; j++)
		{
			double val = w0cov*(sigma.getElement(i, 0) - mean.getComponent(i))*
							   (sigma.getElement(j, 0) - mean.getComponent(j));
			matrixTemp.setElement(i, j, val);
			matrixTemp.setElement(j, i, val);
		}
		cov = cov.add(matrixTemp);
		for (int idxObjs = 0; idxObjs < mean.dimension(); idxObjs++)
		{
			for (int i = 0; i < mean.dimension(); i++) for (int j = 0; j <= i; j++)
			{
				double val = wi*(sigma.getElement(i, idxObjs + 1) - mean.getComponent(i))*
								(sigma.getElement(j, idxObjs + 1) - mean.getComponent(j)) +
							 wi*(sigma.getElement(i, idxObjs + mean.dimension() + 1) - mean.getComponent(i))*
								(sigma.getElement(j, idxObjs + mean.dimension() + 1) - mean.getComponent(j));
				matrixTemp.setElement(i, j, val);
				matrixTemp.setElement(j, i, val);
			}
			cov = cov.add(matrixTemp);
		}
		return cov;
	}


	public AbstractDoubleMatrix calculateCov(AbstractDoubleMatrix sigma_1, AbstractDoubleVector mean_1, AbstractDoubleMatrix sigma_2, AbstractDoubleVector mean_2, double w0cov, double wi)
	{
		AbstractDoubleMatrix cov = new DoubleMatrix(mean_1.dimension(), mean_2.dimension());
			
		AbstractDoubleMatrix matrixTemp = new DoubleMatrix(mean_1.dimension(), mean_2.dimension());
		for (int i = 0; i < mean_1.dimension(); i++) for (int j = 0; j < mean_2.dimension(); j++)
		{
			double val = w0cov*(sigma_1.getElement(i, 0) - mean_1.getComponent(i))*
							   (sigma_2.getElement(j, 0) - mean_2.getComponent(j));
			matrixTemp.setElement(i, j, val);
		}
		cov = cov.add(matrixTemp);
		for (int idxObjs = 0; idxObjs < mean_1.dimension(); idxObjs++)
		{
			for (int i = 0; i < mean_1.dimension(); i++) for (int j = 0; j < mean_2.dimension(); j++)
			{
				double val = wi*(sigma_1.getElement(i, idxObjs + 1) - mean_1.getComponent(i))*
								(sigma_2.getElement(j, idxObjs + 1) - mean_2.getComponent(j)) + 
							 wi*(sigma_1.getElement(i, idxObjs + mean_1.dimension() + 1) - mean_1.getComponent(i))*
								(sigma_2.getElement(j, idxObjs + mean_1.dimension() + 1) - mean_2.getComponent(j));
				matrixTemp.setElement(i, j, val);
			}
			cov = cov.add(matrixTemp);
		}
		return cov;
	}


	public static ModelFilter getModelFilter()
	{
		return new UKFModelFilter();
	}
}


class UKFModelFilter implements ModelFilter
{
	public boolean canUseDynamicModel(DynamicModel dynModel)
	{
		return (dynModel instanceof UKFDoubleVectorFunction);
	}


	public boolean canUseSensorModel(SensorModel sensModel)
	{
		return (sensModel instanceof UKFDoubleVectorFunction);
	}
}

