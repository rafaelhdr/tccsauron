package br.com.r4j.robosim.realrobot;

import java.util.*;
import java.util.List;
import java.io.*;
import java.awt.event.*;
import java.awt.image.*;
import java.awt.*;
import java.net.URL;

import br.com.r4j.commons.util.*;
import br.com.r4j.gui.*;
import br.com.r4j.configurator.*;

import br.com.r4j.robosim.estimator.*;
import br.com.r4j.robosim.*;
import br.com.r4j.math.*;
import JSci.maths.*;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;


public class SonSensor implements Sensor, Configurable
{
	private int [] readings = null;
	private boolean bNewData = false;
	private AbstractDoubleSquareMatrix covar = null;


	public SonSensor()
	{
		covar = new DoubleSquareMatrix(8);
		for (int i = 0; i < 8; i++)
			covar.setElement(i, i, 50);
	}


	public String getName()
	{
		return "Sonar Sensor";
	}


	public void configure(PropertiesHolder props, String strBaseKey)
	{
		if (props.containsProperty(strBaseKey + "sonar_error"))
			for (int i = 0; i < 8; i++)
				covar.setElement(i, i, props.getDoubleProperty(strBaseKey + "sonar_error").doubleValue());
	}


	public void setReadings(int [] readings)
	{
		this.readings = readings;
		for (int i = 0; i < 8; i++)
		{
			if (readings[i] != -1)
			{
				bNewData = true;
				break;
			}
		}
	}


	/** 
	 * Método invocado quando os dados estiverem disponíveis.
	 *
	 */
	public void dataAvailable()
	{
		// não precisa fazer nada ...
	}


	public int getDataDimension()
	{
		return 8;
	}


	public void getData(AbstractDoubleVector output)
	{
		if (bNewData)
		{
			bNewData = false;
			for (int i = 0; i < 8; i++)
				output.setComponent(i, readings[i]);
		}
	}

	public boolean hasNewData()
	{
		return bNewData;
	}

	
	public AbstractDoubleSquareMatrix getDataCovariance()
	{
	}
}


